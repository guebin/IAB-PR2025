[
  {
    "objectID": "content/04wk-1.html",
    "href": "content/04wk-1.html",
    "title": "04wk-1: 10개의 라커, 매트릭스, 파이프연산자 // 숙제",
    "section": "",
    "text": "# {{&lt;video https://youtu.be/playlist?list=PLQqh36zP38-zqBbIkuYq0MZhlr1Edvs3E&si=ldRRpcc2ZFr5fIjD &gt;}}\n\nNULL"
  },
  {
    "objectID": "content/04wk-1.html#개의-라커",
    "href": "content/04wk-1.html#개의-라커",
    "title": "04wk-1: 10개의 라커, 매트릭스, 파이프연산자 // 숙제",
    "section": "1. 10개의 라커",
    "text": "1. 10개의 라커\n1. 복도에 10개의 라커가 있다. 복도를 어떤 남자가 10개의 라커 문을 전부 연다. 그리고 나서 짝수 번호의 라커를 전부 닫는다. 그 다음에는 번호가 3의 배수인 라커를 순서대로 찾아다니며 열려 있으면 닫고, 닫혀 있으면 연다. 그 다음에는 번호가 4의 배수인 라커를 순서대로 찾아다니며 열려있으면 닫고, 닫혀있으면 연다. 이러한 방식으로 6회차까지 진행한다. 열린 라커의 문은 몇개가 되겠는가?\n(풀이1)\n\ndoors = rep(TRUE,60)\ndim(doors) = c(10,6)\ndoors\n\n      [,1] [,2] [,3] [,4] [,5] [,6]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE\n\n\n\nfor(n in 2:6){\n    doors[,n] = doors[,n-1]\n    doors[,n][seq(n,10,n)] = !doors[,n-1][seq(n,10,n)]\n}\n\n\ndoors\n\n      [,1]  [,2]  [,3]  [,4]  [,5]  [,6]\n [1,] TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [2,] TRUE FALSE FALSE FALSE FALSE FALSE\n [3,] TRUE  TRUE FALSE FALSE FALSE FALSE\n [4,] TRUE FALSE FALSE  TRUE  TRUE  TRUE\n [5,] TRUE  TRUE  TRUE  TRUE FALSE FALSE\n [6,] TRUE FALSE  TRUE  TRUE  TRUE FALSE\n [7,] TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [8,] TRUE FALSE FALSE  TRUE  TRUE  TRUE\n [9,] TRUE  TRUE FALSE FALSE FALSE FALSE\n[10,] TRUE FALSE FALSE FALSE  TRUE  TRUE\n\n\n\nsum(doors[,6])\n\n[1] 5\n\n\n(풀이2)\n\ndoors = rep(TRUE,10*6)\ndoors\n\n [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[31] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[46] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n\n\ndim(doors) = c(10,6)\ndoors\n\n      [,1] [,2] [,3] [,4] [,5] [,6]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE\n\n\n\nflip &lt;- function(doors, n){\n    doors[seq(n,10,n)] = !doors[seq(n,10,n)]\n    return(doors)\n}\n\n\nfor(n in 2:6){\n    doors[,n] = flip(doors[,n-1],n)\n}\n\n\ndoors\n\n      [,1]  [,2]  [,3]  [,4]  [,5]  [,6]\n [1,] TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [2,] TRUE FALSE FALSE FALSE FALSE FALSE\n [3,] TRUE  TRUE FALSE FALSE FALSE FALSE\n [4,] TRUE FALSE FALSE  TRUE  TRUE  TRUE\n [5,] TRUE  TRUE  TRUE  TRUE FALSE FALSE\n [6,] TRUE FALSE  TRUE  TRUE  TRUE FALSE\n [7,] TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [8,] TRUE FALSE FALSE  TRUE  TRUE  TRUE\n [9,] TRUE  TRUE FALSE FALSE FALSE FALSE\n[10,] TRUE FALSE FALSE FALSE  TRUE  TRUE\n\n\n\nsum(doors[,6])\n\n[1] 5\n\n\n2. 6번라커는 3회차에서 열려있는가 닫혀있는가?\n(풀이)\n\ndoors[6,3]\n\n[1] TRUE\n\n\n3. 8번라커는 6회차가 진행되는 동안 몇번이나 열림상태로 있는가?\n(풀이)\n\ndoors[8,]\n\n[1]  TRUE FALSE FALSE  TRUE  TRUE  TRUE\n\n\n\nsum(doors[8,])\n\n[1] 4\n\n\n4. 열고 닫힘이 가장 빈번한 라커는 몇번인가?\n(풀이1)\n\ndoors[6,]\n\n[1]  TRUE FALSE  TRUE  TRUE  TRUE FALSE\n\n\n\ndoors[6,]*1\n\n[1] 1 0 1 1 1 0\n\n\n\ndiff(doors[6,])\n\n[1] -1  1  0  0 -1\n\n\n\nabs(diff(doors[6,]))\n\n[1] 1 1 0 0 1\n\n\n\nsum(abs(diff(doors[6,])))\n\n[1] 3\n\n\n\ncount = rep(0,10)\nfor(n in 1:10){\n    count[n] &lt;- sum(abs(diff(doors[n,])))\n}\ncount\n\n [1] 0 1 1 2 1 3 0 2 1 2\n\n\n\nwhich.max(count)\n\n[1] 6\n\n\n(풀이2)\n\nlibrary(tidyverse)\n\n\ncount = rep(0,10)\nfor(n in 1:10){\n    count[n] &lt;- doors[n,] %&gt;% diff %&gt;% abs %&gt;% sum \n}\nwhich.max(count)\n\n[1] 6"
  },
  {
    "objectID": "content/04wk-1.html#matrix",
    "href": "content/04wk-1.html#matrix",
    "title": "04wk-1: 10개의 라커, 매트릭스, 파이프연산자 // 숙제",
    "section": "2. matrix",
    "text": "2. matrix\n\nA. 매트릭스를 선언하는 방법\n- 방법1: 벡터를 만들고, 그것을 row-vector로 해석한뒤 \\(\\to\\) bind\n\nrbind(c(1,2,3,4),c(2,3,4,5))\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    2    3    4\n[2,]    2    3    4    5\n\n\n- 방법2: 벡터를 만들고, 그것을 col-vector로 해석한뒤 \\(\\to\\) bind\n\ncbind(c(1,2,3,4),c(2,3,4,5))\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    2    3\n[3,]    3    4\n[4,]    4    5\n\n\n참고: 만들어진 매트릭스의 차원을 살펴보는 방법\n\nA=rbind(c(1,2,3,4),c(2,3,4,5))\nA\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    2    3    4\n[2,]    2    3    4    5\n\n\n\ndim(A)\n\n[1] 2 4\n\n\n\nA=cbind(c(1,2,3,4),c(2,2,3,4))\nA\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    2    2\n[3,]    3    3\n[4,]    4    4\n\n\n\ndim(A)\n\n[1] 4 2\n\n\n- 방법3: 벡터를 선언하고 dim()을 이용하여 차원을 강제셋팅\n\nA = 1:8\n\n\nA\n\n[1] 1 2 3 4 5 6 7 8\n\n\n\ndim(A)\n\nNULL\n\n\n\ndim(A) &lt;- c(2,4) \n\n\ndim(A)\n\n[1] 2 4\n\n\n\nA\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    3    5    7\n[2,]    2    4    6    8\n\n\n\ndim(A) &lt;- c(4,2)\n\n\nA\n\n     [,1] [,2]\n[1,]    1    5\n[2,]    2    6\n[3,]    3    7\n[4,]    4    8\n\n\n\ndim(A) &lt;- c(3,3)\n\nError: Error in dim(A) &lt;- c(3, 3): dims [product 9] do not match the length of object [8]\n\n\n\n\nB. 매트릭스의 원소를 뽑는 방법\n- 아래와 같은 매트릭스가 있다고 하자.\n\nA=rbind(c(1,2,3,4),c(5,6,7,8),c(9,10,11,12))\nA\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    2    3    4\n[2,]    5    6    7    8\n[3,]    9   10   11   12\n\n\n- 1열을 뽑고싶다.\n\nA[,1] \n\n[1] 1 5 9\n\n\n- 1열,4열을 뽑고싶다.\n\nA[,c(1,4)]\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    5    8\n[3,]    9   12\n\n\n- 2행을 뽑고싶다.\n\nA[2,]\n\n[1] 5 6 7 8\n\n\n- 1행과 2행을 뽑고싶다.\n\nA[c(1,2),]\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    2    3    4\n[2,]    5    6    7    8\n\n\n\nA[1:2,]\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    2    3    4\n[2,]    5    6    7    8\n\n\n- 2행3열의 원소를 뽑고싶다. 즉 (2,3)의 위치에 있는 원소를 뽑고싶다.\n\nA[2,3]\n\n[1] 7\n\n\n- 2열을 제외하고 뽑고 싶다.\n\nA[,-2]\n\n     [,1] [,2] [,3]\n[1,]    1    3    4\n[2,]    5    7    8\n[3,]    9   11   12\n\n\n\n\nC. 매트릭스를 왜 써야하는가?\n- 바둑판구조의 자료형을 표현하기 위해서 = 자료를 바둑판 구조로 저장하기 위해서\n- 자료를 바둑판(2d-array), 나아가 큐브형태(3d-array)로 저장하면 어떠한 이점이 있는가?\n- 자료를 벡터(1d-array)로 저장하면 어떠한 이점이 있는가? 와 같은 질문 - 프로그래밍 구조상의 이점 - 계산상의 이점\n- 자료를 벡터로 관리하면 어떠한 이점이 생기듯이 자료를 매트릭스로 관리해도 이점이 생긴다."
  },
  {
    "objectID": "content/04wk-1.html#파이프연산자",
    "href": "content/04wk-1.html#파이프연산자",
    "title": "04wk-1: 10개의 라커, 매트릭스, 파이프연산자 // 숙제",
    "section": "3. 파이프연산자",
    "text": "3. 파이프연산자\n\n%&gt;% 연산자 (\\(\\star\\star\\star\\))\n\nnote: 진짜 중요한 문법입니다. 너무편해요.\n\n- 아래는 같은코드이다.\n\nsum(1:10)\n\n[1] 55\n\n\n\n1:10 %&gt;% sum()\n\n[1] 55\n\n\n\n1:10 %&gt;% sum\n\n[1] 55\n\n\n- 아래와 같이 2개의 입력을 받는 함수를 생각하자.\n\nmyfun = function(x,y){\n    x**2+y\n}\n\n- 아래는 같은코드이다.\n\nmyfun(2,3)\n\n[1] 7\n\n\n\n2 %&gt;% myfun(3)\n\n[1] 7\n\n\n- 동일한 논리로 아래도 같은코드이다.\n\nmyfun(3,2) \n\n[1] 11\n\n\n\n3 %&gt;% myfun(2)\n\n[1] 11\n\n\n- 입력이 3개인 함수를 만들자.\n\nmyfun2= function(x,y,z){\n    x**2 + y*z\n}\n\n- 아래는 같은코드이다.\n\nmyfun2(2,1,1)\n\n[1] 5\n\n\n\n2 %&gt;% myfun2(1,1)\n\n[1] 5\n\n\n- 왜 이러한 일을 해야하는가? (합성함수 처리에 유리)\n\nx = c(1,100,2,3,4)\nx\n\n[1]   1 100   2   3   4\n\n\n\nx %&gt;% diff \n\n[1]  99 -98   1   1\n\n\n\nx %&gt;% diff %&gt;% abs %&gt;% sum %&gt;% log %&gt;% sqrt\n\n[1] 2.300718\n\n\n- 개념: x %&gt;% f %&gt;% h %&gt;% g 는 아래가 연산되는것\n\n\\(x \\overset{f}{\\to} f(x) \\overset{h}{\\to} h(f(x)) \\overset{g}{\\to} g(h(f(x)))\\)"
  },
  {
    "objectID": "content/04wk-1.html#hw",
    "href": "content/04wk-1.html#hw",
    "title": "04wk-1: 10개의 라커, 매트릭스, 파이프연산자 // 숙제",
    "section": "4. HW",
    "text": "4. HW\n복도에 100개의 라커가 있다. 복도를 어떤 남자가 100개의 라커 문을 전부 연다. 그리고 나서 짝수 번호의 라커를 전부 닫는다. 그 다음에는 번호가 3의 배수인 라커를 순서대로 찾아다니며 열려 있으면 닫고, 닫혀 있으면 연다. 그 다음에는 번호가 4의 배수인 라커를 순서대로 찾아다니며 열려있으면 닫고, 닫혀있으면 연다. 이러한 방식으로 50회차까지 진행한다. 48번 라커는 몇번의 열고 닫힘이 있는가?"
  },
  {
    "objectID": "content/03wk-2.html",
    "href": "content/03wk-2.html",
    "title": "03wk-2: if, if-else, if-elseif-else // 숙제",
    "section": "",
    "text": "—title: “03wk-2: if, if-else, if-elseif-else // 숙제”author: “최규빈”date: “03/20/2025”draft: false—"
  },
  {
    "objectID": "content/03wk-2.html#if",
    "href": "content/03wk-2.html#if",
    "title": "03wk-2: if, if-else, if-elseif-else // 숙제",
    "section": "1. if",
    "text": "1. if\n# 예제1 – if문은 if (조건문) 표현식의 형태로 사용한다.\n\na = 2if (a&gt;0) print('a는 양수') \n\n[1] \"a는 양수\"\n\n\n#\n# 예제2 – space를 임의로 넣어도 OK\n\na=10if    (a&gt;0)    print('a는 양수') \n\n[1] \"a는 양수\"\n\n\n\na=10if  (a&gt;0)    print('a는 양수') \n\n[1] \"a는 양수\"\n\n\n\na=10if(a&gt;0)    print('a는 양수') \n\n[1] \"a는 양수\"\n\n\n#\n# 예제3 – enter 를 임의로 넣어도 OK\n\na=10if (a&gt;0)    print('a는양수')\n\n[1] \"a는양수\"\n\n\n\na=10if (a&gt;0)             print('a는양수')\n\n[1] \"a는양수\"\n\n\n\na=10if             (a&gt;0)             print('a는양수')\n\n[1] \"a는양수\"\n\n\n#\n# 예제4 – if가 만족될때 내릴 명령이 2개이상이면 중괄호를 이용하라.\n잘못된 사용\n\na=10 if (a&gt;0)    print('a는양수')    print('양수인 a의 값은 아래와 같다.')     print(a) \n\n[1] \"a는양수\"\n,[1] \"양수인 a의 값은 아래와 같다.\"\n,[1] 10\n\n\n\na=-10 if (a&gt;0)    print('a는양수')    print('양수인 a의 값은 아래와 같다.')     print(a) \n\n[1] \"양수인 a의 값은 아래와 같다.\"\n,[1] -10\n\n\n\n컴퓨터에게 내릴 명령이 2개이상일 경우? \\(\\to\\) {}을 이용한다. 위의 코드들은 잘못된 코드이다. (에러메시지는 뜨지 않았지만)\n\n올바른 사용법: {}를 이용하여 명령들을 묶는다.\n\na=10 if (a&gt;0){    print('a는양수')    print('양수인 a의 값은 아래와 같다.')     print(a) }\n\n[1] \"a는양수\"\n,[1] \"양수인 a의 값은 아래와 같다.\"\n,[1] 10\n\n\n\na=-10 if (a&gt;0){    print('a는양수') ##     print('양수인 a의 값은 아래와 같다.')     print(a)}\n\n#\n# 예제5 – 중괄호를 묶는 방식\n아래와 같이 중괄호를 묶어도 상관없다.\n\na=10if (a&gt;0){    print('a는양수')    print('양수인 a의 값은 아래와 같다.')     print(a) }\n\n[1] \"a는양수\"\n,[1] \"양수인 a의 값은 아래와 같다.\"\n,[1] 10\n\n\n\na=10if (a&gt;0){    print('a는양수')        print('양수인 a의 값은 아래와 같다.')             print(a)}\n\n[1] \"a는양수\"\n,[1] \"양수인 a의 값은 아래와 같다.\"\n,[1] 10\n\n\n\na=10if (a&gt;0){    print('a는양수')                print('양수인 a의 값은 아래와 같다.')        print(a)                }\n\n[1] \"a는양수\"\n,[1] \"양수인 a의 값은 아래와 같다.\"\n,[1] 10\n\n\n\n가능은 하지만 굳이 위와 같은 방식으로 중괄호를 만들 필요는 없다..\n\n#"
  },
  {
    "objectID": "content/03wk-2.html#if-else",
    "href": "content/03wk-2.html#if-else",
    "title": "03wk-2: if, if-else, if-elseif-else // 숙제",
    "section": "2. if-else",
    "text": "2. if-else\n# 예제1 – if문은 if (조건문) 표현식1 else 표현식2의 형태로 실행한다.\n\nx=2if (x&gt;0) log(x) else print('x는양수이어야함')\n\n[1] 0.6931472\n\n\n\nx=0if (x&gt;0) log(x) else print('x는양수이어야함')\n\n[1] \"x는양수이어야함\"\n\n\n\nx= -1if (x&gt;0) log(x) else print('x는양수이어야함')\n\n[1] \"x는양수이어야함\"\n\n\n#\n# 예제2 – if 문과 if~else 문은 다른기능이다. (\\(\\star\\star\\star\\))\n- 아래와 같이 사용해보자.\n\nx=10if (x&gt;0)    log(x) else     print('x는 양수이어야함')\n\nError: Error in Unknown source: &lt;text&gt;:4:1: unexpected 'else'\n,3:     log(x) \n,4: else\n,   ^\n\n\n\n?? 왜 에러가 나는가?\n\n- 아래는 잘 실행된다.\n\nif (x&gt;0)    log(x)     else           print('x는양수이어야함')\n\n[1] 2.302585\n\n\n\nif (x&gt;0)    log(x)     else    print('x는양수이어야함')\n\n[1] 2.302585\n\n\n- 보통은 아래와 같이 사용한다.\n\nx=0if(x&gt;0){    log(x) }else{    print('x는 양수이어야함')}\n\n[1] \"x는 양수이어야함\"\n\n\n- 결국 한줄에 다 말하거나, 말을 하다가 끊어버리면 된다. // 한줄씩 끊어서 컴퓨터가 읽을떄 if문이 완성되면 안된다..\n- 아래와 같은것들도 가능\n\nx=0if (x&gt;0){    log(x)     }else{print('x는 양수이어야함')        }\n\n[1] \"x는 양수이어야함\"\n\n\n- 아래는 불가능\n\nx=0if (x&gt;0){    log(x) }else{    print('x는 양수이어야함')}\n\nError: Error in Unknown source: &lt;text&gt;:5:1: unexpected 'else'\n,4: }\n,5: else\n,   ^\n\n\n\n중괄호만 친다고 해결되는게 아님\n\n- 결국 아래와 같은 코드를 권장함. (저는 무조건 이렇게만 씁니당)\n\nx=0if(x&gt;0){    log(x) }else{    print('x는 양수이어야함')}\n\n[1] \"x는 양수이어야함\"\n\n\n#"
  },
  {
    "objectID": "content/03wk-2.html#if-elseif-else",
    "href": "content/03wk-2.html#if-elseif-else",
    "title": "03wk-2: if, if-else, if-elseif-else // 숙제",
    "section": "3. if-elseif-else",
    "text": "3. if-elseif-else\n# 예제1\n\nx=10 if (x&gt;0){    print(log(x))}else{    if(x==0){        x=1e-100        print('x=0에서는 log(x)가 정의되지 않으므로 x=1e-100의 값으로 바꾸어 계산하겠습니다.')        print(log(x))    }else{         print('x가음수입니다.')    }}\n\n[1] 2.302585\n\n\n\nx=0if (x&gt;0){    print(log(x))}else{    if(x==0){        x=1e-100        print('x=0에서는 log(x)가 정의되지 않으므로 x=1e-100의 값으로 바꾸어 계산하겠습니다.')        print(log(x))    }else{         print('x가음수입니다.')    }}\n\n[1] \"x=0에서는 log(x)가 정의되지 않으므로 x=1e-100의 값으로 바꾸어 계산하겠습니다.\"\n,[1] -230.2585\n\n\n\nx=-1if (x&gt;0){    print(log(x))}else{    if(x==0){        x=1e-100        print('x=0에서는 log(x)가 정의되지 않으므로 x=1e-100의 값으로 바꾸어 계산하겠습니다.')        print(log(x))    }else{        print('x가음수입니다.')    }}\n\n[1] \"x가음수입니다.\"\n\n\n#\n# 예제2 – 예제1과 아래는 같은 코드이다.\n\nx=10 if (x&gt;0){    print(log(x))}else if(x==0){    x=1e-100    print('x=0에서는 log(x)가 정의되지 않으므로 x=1e-100의 값으로 바꾸어 계산하겠습니다.')    print(log(x))}else{     print('x가음수입니다.')}\n\n[1] 2.302585\n\n\n\nx=0if (x&gt;0){    print(log(x))}else if(x==0){    x=1e-100    print('x=0에서는 log(x)가 정의되지 않으므로 x=1e-100의 값으로 바꾸어 계산하겠습니다.')    print(log(x))}else{     print('x가음수입니다.')}\n\n[1] \"x=0에서는 log(x)가 정의되지 않으므로 x=1e-100의 값으로 바꾸어 계산하겠습니다.\"\n,[1] -230.2585\n\n\n\nx=-1if (x&gt;0){    print(log(x))}else if(x==0){    x=1e-100    print('x=0에서는 log(x)가 정의되지 않으므로 x=1e-100의 값으로 바꾸어 계산하겠습니다.')    print(log(x))}else{     print('x가음수입니다.')}\n\n[1] \"x가음수입니다.\"\n\n\n#"
  },
  {
    "objectID": "content/03wk-2.html#숙제",
    "href": "content/03wk-2.html#숙제",
    "title": "03wk-2: if, if-else, if-elseif-else // 숙제",
    "section": "4. 숙제",
    "text": "4. 숙제\n1. 아래의 코드를 관찰하고 올바르게 고쳐라.\n\nx=-1if (x&gt;0){    print(log(x))}else if(x==0){    x=1e-100    print('x=0에서는 log(x)가 정의되지 않으므로 x=1e-100의 값으로 바꾸어 계산하겠습니다.')    print(log(x))}else{     print('x가음수입니다.')}\n\nError: Error in Unknown source: &lt;text&gt;:5:1: unexpected 'else'\n4: }\n5: else\n   ^\n\n\n(풀이)\n\nx=-1if (x&gt;0){    print(log(x))}else if(x==0){    x=1e-100    print('x=0에서는 log(x)가 정의되지 않으므로 x=1e-100의 값으로 바꾸어 계산하겠습니다.')    print(log(x))}else{     print('x가음수입니다.')}\n\n[1] \"x가음수입니다.\"\n\n\n2. 함수 check가 올바르게 동작하도록 코드를 수정하라.\n\ncheck&lt;- function(x){    if(x%%2==0){        print(\"x는 2의 배수\")    }else if(x%%3==0){        print(\"x는 3의 배수\")    }else if(x%%6==0){        print(\"x는 2의 배수\")        print(\"x는 3의 배수\")    }else{        print(\"x는 3의 배수도 아니고, 2의 배수도 아니다\")    }}\n\n\ncheck(3)\n\n[1] \"x는 3의 배수\"\n\n\n\ncheck(4)\n\n[1] \"x는 2의 배수\"\n\n\n\ncheck(5)\n\n[1] \"x는 3의 배수도 아니고, 2의 배수도 아니다\"\n\n\n\ncheck(6) # 여기가 이상하게 나옴..\n\n[1] \"x는 2의 배수\"\n\n\n\ncheck(7)\n\n[1] \"x는 3의 배수도 아니고, 2의 배수도 아니다\"\n\n\n(풀이)\n\ncheck&lt;- function(x){    if(x%%6==0){        print(\"x는 2의 배수\")        print(\"x는 3의 배수\")    }else if(x%%2==0){        print(\"x는 2의 배수\")    }else if(x%%3==0){        print(\"x는 3의 배수\")    }else{        print(\"x는 3의 배수도 아니고, 2의 배수도 아니다\")    }}\n\n\ncheck(3)\n\n[1] \"x는 3의 배수\"\n\n\n\ncheck(4)\n\n[1] \"x는 2의 배수\"\n\n\n\ncheck(5)\n\n[1] \"x는 3의 배수도 아니고, 2의 배수도 아니다\"\n\n\n\ncheck(6) # 이제 잘나옴\n\n[1] \"x는 2의 배수\"\n[1] \"x는 3의 배수\"\n\n\n\ncheck(7)\n\n[1] \"x는 3의 배수도 아니고, 2의 배수도 아니다\""
  },
  {
    "objectID": "content/01wk-2.html#문제풀이",
    "href": "content/01wk-2.html#문제풀이",
    "title": "01wk-2: 문제풀이, 변수 이름 선언, 벡터의 선언, 함수의 선언",
    "section": "1. 문제풀이",
    "text": "1. 문제풀이\n2025수능-6. \\(\\cos \\left(\\frac{\\pi}{2} + \\theta \\right) = -\\frac{1}{5}\\) 일 때, \\(\\frac{\\sin\\theta}{1 - \\cos^2\\theta}\\) 의 값은? [3점]\n\n\\(-5\\)\n\n\\(-\\sqrt{5}\\)\n\n\\(0\\)\n\\(\\sqrt{5}\\)\n\\(5\\)\n\n(풀이1)\n\ntheta = 2.94\n\n\ncos(pi/2+theta) # 이 값이 -0.2 정도가 되어야 할텐데?\n\n[1] -0.20023\n\n\n반복계산을 하다보니까 \\(\\theta \\approx 2.94\\) 인듯\n\nsin(theta)/(1-cos(theta)^2)\n\n[1] 4.994257\n\n\n(풀이2)\n\nacos(-1/5) - pi/2\n\n[1] 0.2013579\n\n\n\nsin(0.2013579)/(1-cos(0.2013579)^2)\n\n[1] 5.000001\n\n\n\ninput = -0.2\ntheta = acos(input) - pi/2\noutput = sin(theta) / (1-cos(theta)^2)\noutput\n\n[1] 5\n\n\n이걸 하나로 묶으면..\n\nsolve &lt;- function(input){\n    theta = acos(input) - pi/2\n    output = sin(theta)/(1-cos(theta)^2)\n    return(output)\n}\n\n\nsolve(-0.2)\n\n[1] 5\n\n\n(풀이3) – 미완성의 풀이\n\n# theta = c(0.0, 0.1, 0.2, 0,3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9,\n#           1.0, 1.1, 1.2, 1,3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9,\n#           2.0, 2.1, 2.2, 2,3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9)\ntheta = 0:300/100\ntheta\n\n  [1] 0.00 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.10 0.11 0.12 0.13 0.14\n [16] 0.15 0.16 0.17 0.18 0.19 0.20 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29\n [31] 0.30 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.40 0.41 0.42 0.43 0.44\n [46] 0.45 0.46 0.47 0.48 0.49 0.50 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59\n [61] 0.60 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.70 0.71 0.72 0.73 0.74\n [76] 0.75 0.76 0.77 0.78 0.79 0.80 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89\n [91] 0.90 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.00 1.01 1.02 1.03 1.04\n[106] 1.05 1.06 1.07 1.08 1.09 1.10 1.11 1.12 1.13 1.14 1.15 1.16 1.17 1.18 1.19\n[121] 1.20 1.21 1.22 1.23 1.24 1.25 1.26 1.27 1.28 1.29 1.30 1.31 1.32 1.33 1.34\n[136] 1.35 1.36 1.37 1.38 1.39 1.40 1.41 1.42 1.43 1.44 1.45 1.46 1.47 1.48 1.49\n[151] 1.50 1.51 1.52 1.53 1.54 1.55 1.56 1.57 1.58 1.59 1.60 1.61 1.62 1.63 1.64\n[166] 1.65 1.66 1.67 1.68 1.69 1.70 1.71 1.72 1.73 1.74 1.75 1.76 1.77 1.78 1.79\n[181] 1.80 1.81 1.82 1.83 1.84 1.85 1.86 1.87 1.88 1.89 1.90 1.91 1.92 1.93 1.94\n[196] 1.95 1.96 1.97 1.98 1.99 2.00 2.01 2.02 2.03 2.04 2.05 2.06 2.07 2.08 2.09\n[211] 2.10 2.11 2.12 2.13 2.14 2.15 2.16 2.17 2.18 2.19 2.20 2.21 2.22 2.23 2.24\n[226] 2.25 2.26 2.27 2.28 2.29 2.30 2.31 2.32 2.33 2.34 2.35 2.36 2.37 2.38 2.39\n[241] 2.40 2.41 2.42 2.43 2.44 2.45 2.46 2.47 2.48 2.49 2.50 2.51 2.52 2.53 2.54\n[256] 2.55 2.56 2.57 2.58 2.59 2.60 2.61 2.62 2.63 2.64 2.65 2.66 2.67 2.68 2.69\n[271] 2.70 2.71 2.72 2.73 2.74 2.75 2.76 2.77 2.78 2.79 2.80 2.81 2.82 2.83 2.84\n[286] 2.85 2.86 2.87 2.88 2.89 2.90 2.91 2.92 2.93 2.94 2.95 2.96 2.97 2.98 2.99\n[301] 3.00\n\n\n\nplot(theta,cos(pi/2+theta))\nabline(h=-0.2,col=2)\n\n\n\n\n\n\n\n\n#"
  },
  {
    "objectID": "content/01wk-2.html#변수-이름-선언",
    "href": "content/01wk-2.html#변수-이름-선언",
    "title": "01wk-2: 문제풀이, 변수 이름 선언, 벡터의 선언, 함수의 선언",
    "section": "2. 변수 이름 선언",
    "text": "2. 변수 이름 선언\n\nA. 변수이름에 어떠한 값을 넣는 방법\n- 방법1\n\nd = 1\n\n- 방법2\n\ne &lt;- 3\n\n\n\nB. 잘못된 변수명\n# 예제1 – 특수문자 불가능\n\na! &lt;- 3\n\nError: Error in Unknown source: &lt;text&gt;:1:2: unexpected '!'\n1: a!\n     ^\n\n\n#\n# 예제2 – 숫자로 시작하는 변수이름 불가능\n\n2a &lt;- 3 \n\nError: Error in Unknown source: &lt;text&gt;:1:2: unexpected symbol\n1: 2a\n     ^\n\n\n\na2 &lt;- 3 \n\n\n이것은 가능 (숫자로 시작되면 안되는 것이지 숫자를 포함하지 말라는 의미는 아님)\n\n#\n# 예제3 – 띄어쓰기 불가능\n\nGuebin Choi &lt;- 33 \n\nError: Error in Unknown source: &lt;text&gt;:1:8: unexpected symbol\n1: Guebin Choi\n           ^\n\n\n\nthis_is_333 &lt;- 333\n\n\n띄어쓰기 대신 언더바(_)를 활용한다.\n\n\nthis.is.777 &lt;- 777 \n\n\n언더바 말고 닷(.)을 선호하는 사람도 있다.\n\n#\n# 예제4 – 언더바를 포함하는 것은 가능하지만, 언더바로 시작하는 변수명은 사용할 수 없다. `\n\n_x &lt;- 33\n\nError: Error in Unknown source: &lt;text&gt;:1:2: unexpected symbol\n1: _x\n     ^\n\n\n#\n# 예제5 – 사용할 수는 있지만 권장하지 않는 변수이름\n\npi\n\n[1] 3.141593\n\n\n\npi&lt;-333\n\n\npi\n\n[1] 333"
  },
  {
    "objectID": "content/01wk-2.html#벡터의-선언",
    "href": "content/01wk-2.html#벡터의-선언",
    "title": "01wk-2: 문제풀이, 변수 이름 선언, 벡터의 선언, 함수의 선언",
    "section": "3. 벡터의 선언",
    "text": "3. 벡터의 선언\n# 예제1 – 직접 입력\n\nc(1,2,3,3,4,5,2)\n\n[1] 1 2 3 3 4 5 2\n\n\n# 예제2 – seq를 이용\n\nseq(from=0,to=10,by=0.1) # 0~10 까지 0.1의 간격으로 수열만들기 \n\n  [1]  0.0  0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1.0  1.1  1.2  1.3  1.4\n [16]  1.5  1.6  1.7  1.8  1.9  2.0  2.1  2.2  2.3  2.4  2.5  2.6  2.7  2.8  2.9\n [31]  3.0  3.1  3.2  3.3  3.4  3.5  3.6  3.7  3.8  3.9  4.0  4.1  4.2  4.3  4.4\n [46]  4.5  4.6  4.7  4.8  4.9  5.0  5.1  5.2  5.3  5.4  5.5  5.6  5.7  5.8  5.9\n [61]  6.0  6.1  6.2  6.3  6.4  6.5  6.6  6.7  6.8  6.9  7.0  7.1  7.2  7.3  7.4\n [76]  7.5  7.6  7.7  7.8  7.9  8.0  8.1  8.2  8.3  8.4  8.5  8.6  8.7  8.8  8.9\n [91]  9.0  9.1  9.2  9.3  9.4  9.5  9.6  9.7  9.8  9.9 10.0\n\n\n\nseq(from=0, to=1, length.out = 27) # 0~1 까지 등간격으로 총 27개의 수열만들기 \n\n [1] 0.00000000 0.03846154 0.07692308 0.11538462 0.15384615 0.19230769\n [7] 0.23076923 0.26923077 0.30769231 0.34615385 0.38461538 0.42307692\n[13] 0.46153846 0.50000000 0.53846154 0.57692308 0.61538462 0.65384615\n[19] 0.69230769 0.73076923 0.76923077 0.80769231 0.84615385 0.88461538\n[25] 0.92307692 0.96153846 1.00000000\n\n\n# 예제3 – : 를 이용\n\n1:22\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22\n\n\n이 방법을 살짝 응용하면 0~1까지 57개의 변수를 넣는 방법을 아래와 같이 할 수 있다.\n\n0:56/56\n\n [1] 0.00000000 0.01785714 0.03571429 0.05357143 0.07142857 0.08928571\n [7] 0.10714286 0.12500000 0.14285714 0.16071429 0.17857143 0.19642857\n[13] 0.21428571 0.23214286 0.25000000 0.26785714 0.28571429 0.30357143\n[19] 0.32142857 0.33928571 0.35714286 0.37500000 0.39285714 0.41071429\n[25] 0.42857143 0.44642857 0.46428571 0.48214286 0.50000000 0.51785714\n[31] 0.53571429 0.55357143 0.57142857 0.58928571 0.60714286 0.62500000\n[37] 0.64285714 0.66071429 0.67857143 0.69642857 0.71428571 0.73214286\n[43] 0.75000000 0.76785714 0.78571429 0.80357143 0.82142857 0.83928571\n[49] 0.85714286 0.87500000 0.89285714 0.91071429 0.92857143 0.94642857\n[55] 0.96428571 0.98214286 1.00000000\n\n\n물론 아래와 같이하는것이 더 가독성이 좋다.\n\nseq(from=0,to=1,length.out =57)\n\n [1] 0.00000000 0.01785714 0.03571429 0.05357143 0.07142857 0.08928571\n [7] 0.10714286 0.12500000 0.14285714 0.16071429 0.17857143 0.19642857\n[13] 0.21428571 0.23214286 0.25000000 0.26785714 0.28571429 0.30357143\n[19] 0.32142857 0.33928571 0.35714286 0.37500000 0.39285714 0.41071429\n[25] 0.42857143 0.44642857 0.46428571 0.48214286 0.50000000 0.51785714\n[31] 0.53571429 0.55357143 0.57142857 0.58928571 0.60714286 0.62500000\n[37] 0.64285714 0.66071429 0.67857143 0.69642857 0.71428571 0.73214286\n[43] 0.75000000 0.76785714 0.78571429 0.80357143 0.82142857 0.83928571\n[49] 0.85714286 0.87500000 0.89285714 0.91071429 0.92857143 0.94642857\n[55] 0.96428571 0.98214286 1.00000000\n\n\n#\n# 예제4 – rep 를 이용\n\nrep(0,5)\n\n[1] 0 0 0 0 0\n\n\n#"
  },
  {
    "objectID": "content/01wk-2.html#함수의-선언",
    "href": "content/01wk-2.html#함수의-선언",
    "title": "01wk-2: 문제풀이, 변수 이름 선언, 벡터의 선언, 함수의 선언",
    "section": "4. 함수의 선언",
    "text": "4. 함수의 선언\n- 함수의 기본 구조\n함수이름 &lt;- function(입력){\n    함수의 기능 \n    return(출력)\n    }\n\nsolve &lt;- function(input){\n    theta = acos(input) - pi/2\n    output = sin(theta)/(1-cos(theta)^2)\n    return(output)\n}\n\n\nsolve(-1/5)\n\n[1] 5\n\n\n- 아래의 2개의 코드는 거의 같다.\n\n### 1 \nsolve &lt;- function(input){\n    theta = acos(input) - pi/2\n    output = sin(theta)/(1-cos(theta)^2)\n    return(output)\n}\nsolve(-1/5)\n\n### 2\ninput = -1/5 \ntheta = acos(input) - pi/2\noutput = sin(theta)/(1-cos(theta)^2)\noutput\n\n[1] 5\n\n\n- return을 생략해도 괜찮다.\n\nsolve &lt;- function(input){\n    theta = acos(input) - pi/2\n    output = sin(theta)/(1-cos(theta)^2)\n    return(output)\n}\nsolve(-1/5)\n\n[1] 5\n\n\n\nsolve &lt;- function(input){\n    theta = acos(input) - pi/2\n    output = sin(theta)/(1-cos(theta)^2)\n    output\n}\nsolve(-1/5)\n\n[1] 5\n\n\n\nsolve &lt;- function(input){\n    theta = acos(input) - pi/2\n    sin(theta)/(1-cos(theta)^2)\n}\nsolve(-1/5)\n\n[1] 5"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IAB프로그램 (2025)",
    "section": "",
    "text": "실습\n\nhttps://guebin.github.io/IAB2025-Play\n\n질문하는 방법\n\n이메일: guebin@jbnu.ac.kr\n직접방문: 자연과학대학 본관 205호\nZoom: 이메일로 미리 시간을 정할 것\n카카오톡: http://pf.kakao.com/_txeIFG/chat\n\n강의노트\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nMar 22, 2025\n\n\n04wk-1: 10개의 라커, 매트릭스, 파이프연산자 // 숙제\n\n\n최규빈 \n\n\n\n\nMar 20, 2025\n\n\n03wk-2: if, if-else, if-elseif-else // 숙제\n\n\n최규빈 \n\n\n\n\nMar 18, 2025\n\n\n03wk-1: 문제풀이 (아홉개의 공, 100개의 라커) // 숙제\n\n\n최규빈 \n\n\n\n\nMar 13, 2025\n\n\n02wk-2: 문제풀이 (벡터인덱싱, if, for 연습) // 숙제\n\n\n최규빈 \n\n\n\n\nMar 11, 2025\n\n\n02wk-1: 문제풀이, Bool 자료형과 조건판단, 벡터인덱싱, 조건문과 반복문 // 숙제\n\n\n최규빈 \n\n\n\n\nMar 6, 2025\n\n\n01wk-2: 문제풀이, 변수 이름 선언, 벡터의 선언, 함수의 선언\n\n\n최규빈 \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "content/03wk-1.html#문제풀이",
    "href": "content/03wk-1.html#문제풀이",
    "title": "03wk-1: 문제풀이 (아홉개의 공, 100개의 라커) // 숙제",
    "section": "1. 문제풀이",
    "text": "1. 문제풀이\n# 예제 1 – 아홉개의 공\n아홉개의 공이있다. 이 가운데 여덟개는 무게가 같고 하나는 남은 하나는 좀 더 무겁다. 우리에게는 저울이 하나 있는데 이 저울로는 왼쪽의 공들이 무거운지 오른쪽의 공들이 무거운지밖에 알아낼 수 없다. 이 저울을 딱 두번만 사용하여 가장 무거운 공을 찾아내는 알고리즘을 solution 함수로 정리하여 제시하라. 공들의 무게는 길이가 9인 벡터로 온다고 가정한다. 출력은 가장 무거운 공이 위치한 index를 리턴하도록 한다.\n다음은 solution 함수를 실제로 구현하여 사용한 예시이다.\nsolution(c(2,1,1,1,1,1,1,1,1))\n&gt; 1\nsolution(c(2,2,5,2,2,2,2,2,2))\n&gt; 3\n(풀이)\n\nsolution &lt;- function(x){\n    l = x[1:3]\n    m = x[4:6]\n    r = x[7:9]\n    if(sum(l)&gt;sum(m)){\n        if(x[1]&gt;x[2]){\n            idx = 1 \n        }else if(x[1]&lt;x[2]){\n            idx = 2 \n        }else{\n            idx = 3 \n        }\n    }else if(sum(l)&lt;sum(m)){\n        if(x[4]&gt;x[5]){\n            idx = 4 \n        }else if(x[4]&lt;x[5]){\n            idx = 5\n        }else{\n            idx = 6 \n        }\n    }else{\n        if(x[7]&gt;x[8]){\n            idx = 7 \n        }else if(x[7]&lt;x[8]){\n            idx = 8\n        }else{\n            idx = 9 \n        }\n    }\n    return(idx)\n}\n\n\nsolution(c(2,1,1,1,1,1,1,1,1))\n\n1\n\n\n\nsolution(c(2,2,5,2,2,2,2,2,2))\n\n3\n\n\n#\n# 예제 2 – 100개의 라커\n복도에 100개의 라커가 있다. 복도를 어떤 남자가 100개의 라커 문을 전부 연다. 그리고 나서 짝수 번호의 라커를 전부 닫는다. 그 다음에는 번호가 3의 배수인 라커를 순서대로 찾아다니며 열려 있으면 닫고, 닫혀 있으면 연다. 그 다음에는 번호가 4의 배수인 라커를 순서대로 찾아다니며 열려있으면 닫고, 닫혀있으면 연다. 이후에 5의 배수, 6의 배수 .. 인 라커를 순서대로 찾아다니며 행동을 반복한다. 이런식으로 복도를 100번 지나가면 열린 라커의 문은 몇개가 되겠는가?\n\n#     라커1 라커2 라커3 라커4 라커5 라커6  ..... 라커100 \n# 1회  열    열    열   열   열    열    ..... 열 \n# 2회  열    닫    열   닫   열    닫    ..... 닫 \n# 3회  열    닫    닫   닫   열    열    ..... 닫 \n# 4회  열    닫    닫   열   열    열    ..... 닫 \n# ...\n\n# 알고리즘 \n# 1. 100개의 TRUE가 있는 벡터를 만듦. \n# 2. 100개의 TRUE가 있는 벡터에서 2,4,6,...,100 번쨰 원소를 선택하여 그 값을 반전시킴\n# 3. 100개의 TRUE가 있는 벡터에서 3,6,9,...,99 번쨰 원소를 선택하여 그 값을 반전시킴\n# ...\n# 100. 100개의 TRUE가 있는 벡터에서 100 번쨰 원소를 선택하여 그 값을 반전시킴\n\nNULL\n\n\n(예비학습)\n\nx = TRUE\n\n\n!x\n\n[1] FALSE\n\n\n\nx = c(TRUE, TRUE, FALSE)\n\n\n!x\n\n[1] FALSE FALSE  TRUE\n\n\n(풀이)\n\nflip &lt;- function(x){\n    !x\n}\n\n\ndoors = rep(TRUE,100)\nfor(i in 2:100){\n    doors[(1:100) %% i == 0] = flip(doors[(1:100) %% i == 0])\n}\nsum(doors)\n\n[1] 10\n\n\n#"
  },
  {
    "objectID": "content/03wk-1.html#숙제",
    "href": "content/03wk-1.html#숙제",
    "title": "03wk-1: 문제풀이 (아홉개의 공, 100개의 라커) // 숙제",
    "section": "2. 숙제",
    "text": "2. 숙제\n1 – 세 개의 공\n세 개의 공이 있다. 이 중 두 개는 무게가 같고, 하나는 더 가볍다. 우리는 저울을 한 번만 사용하여 가장 가벼운 공이 위치한 index를 찾아야 한다.\n이 문제를 해결하는 solution 함수를 작성하라. 공들의 무게는 길이가 3인 벡터로 주어진다고 가정한다. 출력은 가장 가벼운 공의 index가 되어야 한다.\n(풀이)\n\nsol &lt;- function(x){\n    idx = 0\n    if(x[1]&lt;x[2]){\n        idx = 1 \n    }else if(x[1]&gt;x[2]){\n        idx = 2 \n    }else{\n        idx = 3\n    }\n    return(idx)\n}\n\n\nsol(c(1,1,0.5))\n\n[1] 3\n\n\n2 - 10개의 라커\n복도에 10개의 라커가 있다. 복도를 어떤 남자가 10개의 라커 문을 전부 연다. 그리고 나서 짝수 번호의 라커를 전부 닫는다. 그 다음에는 번호가 3의 배수인 라커를 순서대로 찾아다니며 열려 있으면 닫고, 닫혀 있으면 연다. 그 다음에는 번호가 4의 배수인 라커를 순서대로 찾아다니며 열려있으면 닫고, 닫혀있으면 연다. 열린 라커의 문은 몇개가 되겠는가?\n\ndoors = rep(TRUE,10)\ndoors\n\n [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n\n\ndoors[seq(2,10,by=2)] = !doors[seq(2,10,by=2)]\n\n\ndoors[seq(3,10,by=3)] = !doors[seq(3,10,by=3)]\n\n\ndoors[seq(4,10,by=4)] = !doors[seq(4,10,by=4)]\n\n\nsum(doors)\n\n[1] 6\n\n\n참고코드\n1~10까지의 수 중에서 2의 배수이거나 3의배수를 뽑는 코드\n\n(1:10)[(1:10) %% 2 == 0] # 2의 배수를 뽑는 코드\n\n[1]  2  4  6  8 10\n\n\n\n(1:10)[(1:10) %% 3 == 0] # 3의 배수를 뽑는 코드\n\n[1] 3 6 9\n\n\n\n(1:10) %% 2 == 0 # 2의 배수 자리면 TRUE 그렇지 않으면 FALSE\n\n [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE\n\n\n\n(1:10) %% 3 == 0 # 3의 배수 자리면 TRUE 그렇지 않으면 FALSE\n\n [1] FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE\n\n\n\n(1:10)[((1:10) %% 2 == 0) | ((1:10) %% 3 == 0)] # 2의 배수이거나 3의 배수를 뽑는 코드\n\n[1]  2  3  4  6  8  9 10"
  },
  {
    "objectID": "content/02wk-1.html#문제풀이",
    "href": "content/02wk-1.html#문제풀이",
    "title": "02wk-1: 문제풀이, Bool 자료형과 조건판단, 벡터인덱싱, 조건문과 반복문 // 숙제",
    "section": "1. 문제풀이",
    "text": "1. 문제풀이\n2024수능-19. 함수 \\(f(x) = \\sin \\frac{\\pi}{4} x\\) 할 때, \\(0 &lt; x &lt; 16\\)에서 부등식\n\\[\nf(2+x) f(2-x) &lt; \\frac{1}{4}\n\\]\n을 만족시키는 모든 자연수 \\(x\\)의 값의 합을 구하시오. [3점]\n(풀이1)\n\nf = function(x){\n   sin(pi/4 *x) \n}\n\n\nx=1\nf(2+x)*f(2-x)\n\n[1] 0.5\n\n\n…\n\nx=15\nf(2+x)*f(2-x)\n\n[1] 0.5\n\n\n(풀이2)\n\nf = function(x){\n   sin(pi/4 *x) \n}\n\n\nx = 1:15\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n\n\n\ny = c(1,5,2,3)\ny\n\n[1] 1 5 2 3\n\n\n\nf(2+x) * f(2-x) &lt; 1/4\n\n [1] FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE\n[13] FALSE  TRUE FALSE\n\n\n\nx[f(2+x) * f(2-x) &lt; 1/4]\n\n[1]  2  6 10 14\n\n\n\nsum(x[f(2+x) * f(2-x) &lt; 1/4])\n\n[1] 32\n\n\n(풀이3)\n\ns = 0 \nfor(x in 1:15){\n    if(f(2+x)*f(2-x) &lt; 1/4){\n        s = s+x\n    }\n}\ns\n\n[1] 32"
  },
  {
    "objectID": "content/02wk-1.html#bool-자료형과-조건판단",
    "href": "content/02wk-1.html#bool-자료형과-조건판단",
    "title": "02wk-1: 문제풀이, Bool 자료형과 조건판단, 벡터인덱싱, 조건문과 반복문 // 숙제",
    "section": "2. Bool 자료형과 조건판단",
    "text": "2. Bool 자료형과 조건판단\n- 예시1\n\n2&gt;3\n\n[1] FALSE\n\n\n- 예시2\n\nx = 1:5\nx\n\n[1] 1 2 3 4 5\n\n\n\nx&gt;3\n\n[1] FALSE FALSE FALSE  TRUE  TRUE\n\n\n\nx&lt;5\n\n[1]  TRUE  TRUE  TRUE  TRUE FALSE\n\n\n\nx&gt;=3\n\n[1] FALSE FALSE  TRUE  TRUE  TRUE\n\n\n\nx&lt;=5\n\n[1] TRUE TRUE TRUE TRUE TRUE\n\n\n\nx==3\n\n[1] FALSE FALSE  TRUE FALSE FALSE"
  },
  {
    "objectID": "content/02wk-1.html#벡터인덱싱",
    "href": "content/02wk-1.html#벡터인덱싱",
    "title": "02wk-1: 문제풀이, Bool 자료형과 조건판단, 벡터인덱싱, 조건문과 반복문 // 숙제",
    "section": "3. 벡터인덱싱",
    "text": "3. 벡터인덱싱\n\nA. 번호로 뽑는 방법\n\n벡터의 원소에 순서대로 번호를 매겨서 뽑는 방식\n\n# 예제1– 첫 원소를 뽑고싶다.\n\nx&lt;-c(1,2,-2,4,5,-5,6)\nx\n\n[1]  1  2 -2  4  5 -5  6\n\n\n\nx[1]\n\n[1] 1\n\n\n#\n# 예제2 – 세번째 원소를 뽑고싶다.\n\nx&lt;-c(1,2,-2,4,5,-5,6)\nx\n\n[1]  1  2 -2  4  5 -5  6\n\n\n\nx[3]\n\n[1] -2\n\n\n#\n# 예제3 – 첫번째부터 세번째까지의 원소를 뽑고싶다.\n\nx&lt;-c(1,2,-2,4,5,-5,6)\nx\n\n[1]  1  2 -2  4  5 -5  6\n\n\n\nx[1:3]\n\n[1]  1  2 -2\n\n\n\nx[c(1,2,3)]\n\n[1]  1  2 -2\n\n\n#\n# 예제4 – 2,5,6 번째의 원소를 뽑고싶다면?\n\nx&lt;-c(1,2,-2,4,5,-5,6)\nx\n\n[1]  1  2 -2  4  5 -5  6\n\n\n\nx[c(2,5,6)]\n\n[1]  2  5 -5\n\n\n#\n# 예제5 – 3번째 원소를 제외하고 호출\n\nx&lt;-c(1,2,-2,4,5,-5,6)\nx\n\n[1]  1  2 -2  4  5 -5  6\n\n\n\nx[c(1,2,4,5,6,7)]\n\n[1]  1  2  4  5 -5  6\n\n\n\nx[-3]\n\n[1]  1  2  4  5 -5  6\n\n\n# 예제6 – 3,4번째의 원소를 제외하고 호출\n\nx[c(-3,-4)]\n\n[1]  1  2  5 -5  6\n\n\n\nx[-(3:4)]\n\n[1]  1  2  5 -5  6\n\n\n\n\nB. 조건으로 뽑는 방법\n\n어떠한 조건을 주고, 그 조건에 만족하는 원소 (혹은 만족하지 않는 원소)를 뽑는 방식\n\n# 예제1 – 양수의 원소를 뽑는다.\n\nx&lt;-c(1,2,-2,4,5,-5,6)\nx\n\n[1]  1  2 -2  4  5 -5  6\n\n\n\nx&gt;0\n\n[1]  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE\n\n\n\nx[x&gt;0]\n\n[1] 1 2 4 5 6\n\n\n#\n# 예제2 – 3보다 큰 원소를 뽑는 방법\n\nx&lt;-c(1,2,-2,4,5,-5,6)\nx\n\n[1]  1  2 -2  4  5 -5  6\n\n\n\nx[x&gt;3]\n\n[1] 4 5 6\n\n\n#\n# 예제3 – 3번째 원소를 뽑는방법\n\nx&lt;-c(1,2,-2,4,5,-5,6)\nx\n\n[1]  1  2 -2  4  5 -5  6\n\n\n\narr = c(FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE)\narr\n\n[1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n\n\n\nx[arr]\n\n[1] -2\n\n\n#\n# 예제4 – 값이 -2인 원소를 뽑아라.\n\nx&lt;-c(1,2,-2,4,5,-5,6)\nx\n\n[1]  1  2 -2  4  5 -5  6\n\n\n\nx[x == -2]\n\n[1] -2\n\n\n#\n# 예제5 – 값이 -1.5와 가장 가까운 원소를 뽑아라.\n\nx - (-1.5)\n\n[1]  2.5  3.5 -0.5  5.5  6.5 -3.5  7.5\n\n\n\nabs(x - (-1.5))\n\n[1] 2.5 3.5 0.5 5.5 6.5 3.5 7.5\n\n\n\nmin(abs(x - (-1.5)))\n\n[1] 0.5\n\n\n\nabs(x - (-1.5)) == min(abs(x - (-1.5)))\n\n[1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n\n\n\nx[abs(x - (-1.5)) == min(abs(x - (-1.5)))]\n\n[1] -2\n\n\n#\n# 예제6 – 값이 0.5와 가장 가까운 원소를 뽑아라.\n\nx = rnorm(100)\nx\n\n  [1] -0.311304729  0.196110860 -0.191987399  0.632793486  0.407982410\n  [6]  0.864718044 -0.352966617 -1.406632984  0.930323376 -0.211177345\n [11]  0.174489842 -1.038388188 -1.130694552  0.162414718  0.857153460\n [16]  0.405123384  0.026784113 -1.026959835 -0.462168583 -0.375374318\n [21]  1.591985359 -0.064623494  0.478029165 -0.045583822  2.478326033\n [26]  0.331902286  0.499881633  0.119367202  0.007451714  0.725801470\n [31]  0.656933182  0.073287602 -1.415772205 -0.477024858  1.221302265\n [36] -0.398021993  0.546331883 -0.324018146  0.330657882 -0.360152774\n [41]  1.331364124 -0.672527606 -0.437897514  1.105811374 -0.232983468\n [46]  0.793021899 -0.618798438 -0.654156632  1.826482099 -0.409432487\n [51]  1.081860665  0.657260779  0.338851369  0.051188750  0.133293222\n [56] -2.143363730 -0.932413327  1.259017917  0.560828441  0.549731458\n [61]  0.374222028  1.212201517 -0.766937380  0.738233964 -0.213323397\n [66]  0.449868009  0.834543548  1.008085221 -1.548439118 -0.162223345\n [71] -0.294176392 -2.081089322  0.744885524  0.859101047  0.325550519\n [76] -0.504631524 -0.053201153 -2.081642005  0.063341785 -0.032805806\n [81]  0.890016964 -2.011684049  0.615605307  0.611636798 -1.394488649\n [86] -0.665951804 -0.638994227  1.245491526  1.603119132 -1.859557340\n [91] -1.349329167 -0.168900117  1.378241904 -0.663119091  0.016505925\n [96] -0.808047477 -0.008849918 -1.174490950 -0.385805036  0.008856681\n\n\n\nx[abs(x - 0.5) == min(abs(x - 0.5))]\n\n[1] 0.4998816\n\n\n#"
  },
  {
    "objectID": "content/02wk-1.html#조건문과-반복문",
    "href": "content/02wk-1.html#조건문과-반복문",
    "title": "02wk-1: 문제풀이, Bool 자료형과 조건판단, 벡터인덱싱, 조건문과 반복문 // 숙제",
    "section": "4. 조건문과 반복문",
    "text": "4. 조건문과 반복문\n\nA. 조건문\n- 예시1\n\nx = -3\nif(x&gt;0){\n    print(\"양수\")\n}else if(x&lt;0){\n    print(\"음수\")\n}else{\n    print(\"0\")\n}\n\n[1] \"음수\"\n\n\nx = 0  \n만약, x&gt;0 이면, \n    print(\"양수\")\n그렇지않고, 만약 x&lt;0 이면,\n    print(\"음수\")\n그외의 모든 경우는\n    print(\"0\") \n\n\nB. 반복문\n- 예시1\n\nfor(x in 1:10){\n    print(x)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n\n\n- 예시2\n\nfor(x in 1:10){\n    print(x^2)\n}\n\n[1] 1\n[1] 4\n[1] 9\n[1] 16\n[1] 25\n[1] 36\n[1] 49\n[1] 64\n[1] 81\n[1] 100\n\n\n- 예시3 – \\(1,4,9,\\dots,100\\) 에서 \\(20\\)보다 크고 \\(80\\)보다 작은 수를 출력\n\nfor(x in 1:10){\n    if( (x^2&gt;20)*(x^2&lt;80) ){\n        print(x^2)\n    }\n}\n\n[1] 25\n[1] 36\n[1] 49\n[1] 64"
  },
  {
    "objectID": "content/02wk-1.html#숙제",
    "href": "content/02wk-1.html#숙제",
    "title": "02wk-1: 문제풀이, Bool 자료형과 조건판단, 벡터인덱싱, 조건문과 반복문 // 숙제",
    "section": "5. 숙제",
    "text": "5. 숙제\n1. 아래와 같은 벡터 x 를 선언하였다고 하자.\n\nset.seed(43053)\nx = rnorm(10)\nx\n\n [1]  0.4553673 -0.7687380  1.1783003  0.4023584 -0.4353551  0.1719379\n [7]  0.7200204 -2.3899837  1.6949456 -0.3216081\n\n\n값이 -0.1 보다 크고 0.5 보다 작은 원소들의 합을 구하여라.\n2. for를 이용하여 1부터 100까지 더하는 코드를 작성하여라."
  },
  {
    "objectID": "content/02wk-2.html",
    "href": "content/02wk-2.html",
    "title": "02wk-2: 문제풀이 (벡터인덱싱, if, for 연습) // 숙제",
    "section": "",
    "text": "—title: “02wk-2: 문제풀이 (벡터인덱싱, if, for 연습) // 숙제”author: “최규빈”date: “03/13/2025”draft: false—"
  },
  {
    "objectID": "content/02wk-2.html#문제풀이",
    "href": "content/02wk-2.html#문제풀이",
    "title": "02wk-2: 문제풀이 (벡터인덱싱, if, for 연습) // 숙제",
    "section": "1. 문제풀이",
    "text": "1. 문제풀이\n# 예제 – 아래의 벡터를 고려하자.\n\nset.seed(43052)x = rnorm(100)\n\n(1) x의 원소중 그 값이 양수인 것은 모두 몇개인가?\n\nsum(x&gt;0)\n\n[1] 59\n\n\n(2) x의 평균을 구하여라.\n\nmean(x)\n\n[1] 0.1044026\n\n\n(3) x의 원소중 평균과 가장 가까운 값을 구하여라.\n(풀이1)\n\ndist = abs(x - mean(x)) # dist는 x와 x의 평균간의 차이를 나타내는 벡터\n\n\ntf_array &lt;- (dist == min(dist))# tf_array 는 길이가 100이고 true, false로만 구성된 array # 그런데 이 tf_array는 하나의 true값만 있고, 그 true값은 dist가 가장 작은 지점에서 true를 가짐\n\n\nx[tf_array]\n\n[1] 0.102093\n\n\n(풀이2)\n\nidx = which.min(dist)# idx 는 dist의 최소값이 존재하는 위치(index)가 저장되어 있음\n\n\nx[idx]\n\n[1] 0.102093\n\n\n새로운 문제 – dist에서 which.min을 쓰지 않고 위에서 구한 idx를 얻는 방법?\n\nwhich.min(dist)\n\n[1] 47\n\n\n\n(1:100)[dist==min(dist)]\n\n[1] 47\n\n\n#\n# 예제 – 아래의 벡터를 고려하자.\n\nset.seed(43052)x = sample(1:100,50)x\n\n [1]  8 55 56 41 88 39 59 65 51 87 49 14 98 78  4 11 64  9 16 33 60 22 53 76 45\n[26] 63 13 95 80 81 21 38 12 28  3 73 93 97 96 90  7 84 10 32 18 79 57 89 68 31\n\n\n(1) x의 원소중 짝수는 몇개 있는가?\n\n50 - sum(x %% 2)\n\n[1] 23\n\n\n\nsum((x %% 2) == 0)\n\n[1] 23\n\n\n(2) x의 원소중 가장 작은 홀수는 무엇인가?\n\nmin(x[(x %% 2) == 1])\n\n[1] 3\n\n\n#\n2010(나)6월평가원-4. 실수 \\(a\\) 가 \\[\\frac{2^a + 2^{-a}}{2^a - 2^{-a}} = -2\\]를 만족시킬 때, \\(4^a + 4^{-a}\\) 의 값은?1. $ $ 2. $ $ 3. $ $ 4. $ $ 5. $ $\n(풀이)\n\na = seq(from=-2, to =-0.1, 0.0001)f&lt;- function(a){    up = 2^(a) + 2^(-a)    down = 2^(a) - 2^(-a)     up/down }plot(a,f(a))abline(h=-2,col=2)#( 2^(a) + 2^(-a) ) / (2^(a) - 2^(-a))\n\n\n\n\n\n\n\n\n\na[which.min(abs(f(a)+2))]\n\n[1] -0.7925\n\n\n\nf(-0.7925)\n\n[1] -1.999961\n\n\n\n4^(-0.7925) + 4^(0.7925)\n\n[1] 3.333403\n\n\n\nc(5/2,10/3,17/4, 26/5, 37/6)\n\n[1] 2.500000 3.333333 4.250000 5.200000 6.166667\n\n\n2024수능-16. 방정식 \\(3^{x-8} = \\left(\\frac{1}{27}\\right)^x\\) 을 만족시키는 실수 \\(x\\)의 값을 구하시오. [3점]\n(풀이)\n\nx = seq(from = -5, to=5, by =0.1)l = 3^(x-8) - (1/27)^xx[which.min(abs(l))]\n\n[1] 2\n\n\n2021(가)9월평가원-10. 수열 \\(\\{a_n\\}\\)은 \\(a_1 = 12\\)이고, 모든 자연수 \\(n\\)에 대하여 \\[a_{n+1} + a_n = (-1)^{n+1} \\times n\\]을 만족시킨다. \\(a_k &gt; a_1\\)인 자연수 \\(k\\)의 최소값은?1. 2 2. 4 3. 6 4. 8 5. 10\n(풀이)\n\na = c()a\n\nNULL\n\n\n\na = c() a[1] = 12for(n in 1:100){    a[n+1] = - a[n] + (-1)^(n+1) * n }(1:100)[a&gt;a[1]]\n\n [1]   8  10  12  14  16  18  20  22  24  26  28  30  32  34  36  38  40  42  44\n[20]  46  48  50  52  54  56  58  60  62  64  66  68  70  72  74  76  78  80  82\n[39]  84  86  88  90  92  94  96  98 100\n\n\n답은 8\n2007(나)6월평가원-14. 다음은 어느 회사의 연봉에 대한 규정이다. (가) 입사 첫째 해 연봉은 \\(a\\)원이고, 입사 19년째 해까지의 연봉은 해마다 직전 연봉에서 8%씩 인상된다. (나) 입사 20년째 해부터의 연봉은 입사 19년째 해 연봉의 \\(2/3\\)로 한다. 이 회사에 입사한 사람이 28년 동안 근무하여 받는 연봉의 총합은? (단, \\(1.08^{18} = 4\\)로 계산한다.) 1. \\(\\frac{101}{2} a\\) 2. \\(\\frac{111}{2} a\\) 3. \\(\\frac{121}{2} a\\) 4. \\(\\frac{131}{2} a\\) 5. \\(\\frac{141}{2} a\\)\n(풀이)\n\na = 1sal = c()sal[1] = afor(y in 2:19){    sal[y] &lt;- sal[y-1] * 1.08 }for(y in 20:28){    sal[y] &lt;- sal[19] * 2/3 }sum(sal)\n\n[1] 65.42238"
  },
  {
    "objectID": "content/02wk-2.html#숙제",
    "href": "content/02wk-2.html#숙제",
    "title": "02wk-2: 문제풀이 (벡터인덱싱, if, for 연습) // 숙제",
    "section": "2. 숙제",
    "text": "2. 숙제\n1. \\(\\frac{3}{2}&lt; \\theta &lt; 2\\pi\\) 인 \\(\\theta\\) 에 대하여 \\(\\cos(\\theta)= \\frac{\\sqrt{6}}{3}\\) 을 만족하는 \\(\\theta\\) 값을 구하라.\n(풀이)\n\ntheta = seq(from=3/2,to=2*pi,length=100)\n\n\n# plot(theta, cos(theta), type='l')# abline(h=sqrt(6)/3,col=2)# 5~6사이에 답이 있는듯 \n\nNULL\n\n\n\ntheta[abs(cos(theta)-sqrt(6)/3) == min(abs(cos(theta)-sqrt(6)/3))]\n\n[1] 5.65509\n\n\n2. 어떤 회사에서는 연봉이 매년 일정한 규칙에 따라 인상된다.1. 입사 첫해 연봉은 4000만 원이다. 2. 다음 해부터는 전년도 연봉의 8%를 인상한 후, 추가로 100만 원을 더해 결정한다. 즉, 연봉을 \\(a_n\\)이라 하면 다음과 같은 관계식을 따른다. (단위는 만원)\\[\\begin{cases}a_1 = 4000 & \\\\a_n = a_{n-1} \\times 1.08 + 100 & n=2,3,\\dots \\end{cases}\\]이 회사에서 20년 동안 근무했을 때, 받는 총 연봉의 합은 얼마인가?\n(풀이)\n\na = c()a[1] = 4000 for(n in 2:20){    a[n] = a[n-1] * 1.08 + 100 }sum(a)\n\n[1] 215250.3"
  }
]